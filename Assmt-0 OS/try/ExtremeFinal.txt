section .data
     text3 db "Please enter A Number", 10, 0
	 text1 db "What is your name?", 10, 0
	 text2 db "hello,",10, 0
	 text db "Its not an integer", 10, 0
	 
	 len equ $-text
	 
section .bss
	name resb 16
	ascii resb 16
	intMem resb 100
; 	intSt resb 16
	intAddr resb 8
	digitSpace resb 100
    digitSpacePos resb 8
	
	
section .text
	global _start
	
_start:
	call _printText1
	call _getName
	call _printText2
	call _printName
; 	call _printText3
; 	call _getText
; 	call _egprint
    ; call _toInt
; 	call _printDigit
	
	mov rax, 60
	mov rdi, 0
	syscall
	


_egprint:
    mov rax, 1
	mov rdi, 1
	mov rsi, ascii
	mov rdx, 16
	syscall
	ret
    
_toInt:
    mov rax, 0
    mov rdi, ascii
    movzx rsi, byte[rdi]
    test rsi,rsi;check for null and set flag to 1 if rsi == 0
    je _printASCII
    jne _toInteger
    
_toInteger:
    cmp rsi, 48
    jl _invalid
    
    cmp rsi, 57
    jg _invalid
    
    sub rsi, 48
    imul rax, 10
    add rax, rsi
    mov rax, rax
    ; mov r8, rax
    inc rdi
    movzx rsi, byte[rdi]
    test rsi,rsi;check for null and set flag to 1 if rsi == 0
    je _printASCII
    jne _toInteger
    
_done:
    mov rax, 1
	mov rdi, 1
	mov rsi, ascii
	mov rdx, 16
	syscall
    ret
    
_invalid:
    mov rax, 1
	mov rdi, 1
	mov rsi, text
	mov rdx, len
	syscall
	ret
    
	
; _printText1:
; 	mov rax, 1
; 	mov rdi, 1
; 	mov rsi, text1
; 	mov rdx, 18
; 	syscall
; 	ret

_printText1:
	mov rax, text1
	push rax
	mov rbx, 0
	jmp _printLoop
	
_printLoop:
    inc rax
    inc rbx
    mov cl, [rax]
    cmp cl, 0
    jne _printLoop
 
    mov rax, 1
    mov rdi, 1
    pop rsi
    mov rdx, rbx
    syscall
 
    ret

_printText2:
	mov rax, text2
	push rax
	mov rbx, 0
	jmp _printLoop

; _printText2:
; 	mov rax, 1
; 	mov rdi, 1
; 	mov rsi, text2
; 	mov rdx, 6
; 	syscall
; 	ret
	


_printASCII:
    ; mov rax, 200
    jmp _printRAX
    
 
    mov rax, 60
    mov rdi, 0
    syscall
    
_printRAX:
    mov rcx, digitSpace
    mov rbx, 10
    mov [rcx], rbx
    inc rcx
    mov [digitSpacePos], rcx
 
_printRAXLoop:
    mov rdx, 0
    mov rbx, 10
    div rbx
    push rax
    add rdx, 48
 
    mov rcx, [digitSpacePos]
    mov [rcx], dl
    inc rcx
    mov [digitSpacePos], rcx
    
    pop rax
    cmp rax, 0
    jne _printRAXLoop
    
 
_printRAXLoop2:
    mov rcx, [digitSpacePos]
 
    mov rax, 1
    mov rdi, 1
    mov rsi, rcx
    mov rdx, 1
    syscall
 
    mov rcx, [digitSpacePos]
    dec rcx
    mov [digitSpacePos], rcx
 
    cmp rcx, digitSpace
    jge _printRAXLoop2
 
    ret
    
_printName:
	mov rax, name
	push rax
	mov rbx, 0
	jmp _printLoop

; _printName:
; 	mov rax, 1
; 	mov rdi, 1
; 	mov rsi, name
; 	mov rdx, 16
; 	syscall
; 	ret
	
_getName:
	mov rax, 0
	mov rdi, 0
	mov rsi, name
	mov rdx, 16
	syscall
	ret
	
_getText:
    mov rax, 0
	mov rdi, 0
	mov rsi, ascii
	mov rdx, 16
	syscall
	ret
	
_printText3:
	mov rax, 1
	mov rdi, 1
	mov rsi, text3
	mov rdx, 21
	syscall
	ret