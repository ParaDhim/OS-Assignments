section .data
	 text1 db "What is your name?\n"
	 text2 db "hello,"
	 text db "Its not an integer", 10
	 len equ $-text
	 
section .bss
	name resb 16
	ascii resb 16
	intMem resb 100
	intSt resb 16
	
	
section .text
	global _start
	
_start:
; 	call _printText1
; 	call _getName
; 	call _printText2
; 	call _printName
	call _getText
; 	call _egprint
    call _toInt
; 	call _printDigit
	
	mov rax, 60
	mov rdi, 0
	syscall
	
_getText:
    mov rax, 0
	mov rdi, 0
	mov rsi, ascii
	mov rdx, 16
	syscall
	ret

_egprint:
    mov rax, 1
	mov rdi, 1
	mov rsi, ascii
	mov rdx, 16
	syscall
	ret
    
_toInt;
    mov rax, 0
    mov rdi, ascii
    jmp _toInteger
    
_toInteger:
    movzx rsi, byte[rdi]
    test rsi,rsi;check for null and set flag to 1 if rsi == 0
    je _done
    
    
    cmp rsi, 48
    jl _invalid
    
    cmp rsi, 57
    jg _invalid
    
    sub rsi, 48
    imul rax, 10
    add rax, rsi
    inc rdi
    jmp _toInteger
    
_done:
    mov rax, 1
	mov rdi, 1
	mov rsi, ascii
	mov rdx, 16
	syscall
    ret
    
_invalid:
    mov rax, 1
	mov rdi, 1
	mov rsi, text
	mov rdx, len
	syscall
	ret
    
_printDigit:
    mov rcx, [intAddr]
    
    mov rax, 1
    mov rdi, 1
    mov rsi, rcx
    mov rdx, 1
    syscall
    mov rcx, [intAddr]
    
    mov rax, 1
    mov rdi, 1
    mov rsi, rcx
    mov rdx, 1
    syscall
    mov rcx, [intAddr]
    
    mov rax, 1
    mov rdi, 1
    mov rsi, rcx
    mov rdx, 1
    syscall
    mov rcx, [intAddr]
    dec rcx
    mov[intAddr], rcx
    cmp rcx, intMem
    jge _printDigit
    
    ret
	
_printText1:
	mov rax, 1
	mov rdi, 1
	mov rsi, text1
	mov rdx, 18
	syscall
	ret
	
_printText2:
	mov rax, 1
	mov rdi, 1
	mov rsi, text2
	mov rdx, 6
	syscall
	ret

_printName:
	mov rax, 1
	mov rdi, 1
	mov rsi, name
	mov rdx, 16
	syscall
	ret
	
_getName:
	mov rax, 0
	mov rdi, 0
	mov rsi, name
	mov rdx, 16
	syscall
	ret