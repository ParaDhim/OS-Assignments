section .data
	 text1 db "What is your name?\n"
	 text2 db "hello,"
	 text db "Its not an integer", 10
	 len equ $-text
	 
section .bss
	name resb 16
	ascii resb 16
	intMem resb 100
	intAddr resb 8
	digitSpace resb 100
	digitSpacePos resb 8
	
section .text
	global _start
	
_start:
; 	call _printText1
; 	call _getName
; 	call _printText2
; 	call _printName
	call _getText
; 	call _egprint
	call _toInteger
	call _getInt
; 	call _appendEOL
; 	call _printDigit
	
	mov rax, 60
	mov rdi, 0
	syscall
	
_getText:
    mov rax, 0
	mov rdi, 0
	mov rsi, ascii
	mov rdx, 16
	syscall
	ret

_egprint:
    mov rax, 1
	mov rdi, 1
	mov rsi, ascii
	mov rdx, 16
	syscall
	ret
    
	
_toInteger:
    mov rbx, 10
    xor rax, rax
    mov rcx, ascii
    movzx rdx, byte[rcx]
    inc rcx
    
    cmp rdx, '0'
    jb _invalid
    
    cmp rdx, '9'
    ja _invalid
    
    sub rdx, '0'
    mul rbx
    add rax, rdx
    jmp _toInteger
    call _getInt
    
    ret

_invalid:
    mov rax, 1
	mov rdi, 1
	mov rsi, text
	mov rdx, len
	syscall
	ret
	
; _appendEOL:
;     mov rcx, intMem
;     mov rbx, 10 ;EOL
;     mov [rcx], rbx
;     inc rcx
;     mov [intAddr], rcx
    
; _loopDigit:
;     xor rdx, rdx
;     mov rbx, 10
;     div rbx
;     push rax
;     add rdx, '0'
;     mov rcx, [intAddr]
;     mov [rcx], dl
;     inc rcx
;     mov [intAddr], rcx
;     pop rax
;     cmp rax, 0
;     jne _loopDigit
    
_printDigit:
    mov rcx, digitSpace
    mov rbx, 10;for new line 10 is given
    mov [rcx], rbx
    inc rcx
    mov [digitSpacePos], rcx

_printDigitLp:
    mov rdx, 0
    mov rbx, 10
    div rbx
    push rax
    add rdx, 48
 
    mov rcx, [digitSpacePos]
    mov [rcx], dl
    inc rcx
    mov [digitSpacePos], rcx
    
    pop rax
    cmp rax, 0
    jne _printDigitLp

_printDigitLp2:
    mov rcx, [digitSpacePos]
 
    mov rax, 1
    mov rdi, 1
    mov rsi, rcx
    mov rdx, 1
    syscall
 
    mov rcx, [digitSpacePos]
    dec rcx
    mov [digitSpacePos], rcx
 
    cmp rcx, digitSpace
    jge _printDigitLp2
 
    ret
	
_printText1:
	mov rax, 1
	mov rdi, 1
	mov rsi, text1
	mov rdx, 18
	syscall
	ret
	
_printText2:
	mov rax, 1
	mov rdi, 1
	mov rsi, text2
	mov rdx, 6
	syscall
	ret

_printName:
	mov rax, 1
	mov rdi, 1
	mov rsi, name
	mov rdx, 16
	syscall
	ret
	
_getName:
	mov rax, 0
	mov rdi, 0
	mov rsi, name
	mov rdx, 16
	syscall
	ret
	
_getInt:
	mov rax, 0
	mov rdi, 0
	mov rsi, ascii
	mov rdx, 16
	syscall
	ret